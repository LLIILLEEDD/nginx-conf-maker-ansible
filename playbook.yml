---
- name: nginx conf maker
  hosts: localhost
  become: yes

  vars_files:
    - vars/vars_path.yml
    - params/params.yml

  tasks:

# Проверяем установлен ли nginx
    - name: Check installed nginx 
      block:
        - name: Check nginx
          command: nginx -v
          register: nginx_check
          changed_when: false
          failed_when: false

        - name: Erorr msg
          fail:
            msg: "Nginx not installed"
          when: nginx_check.rc != 0

# Проверяем существуют ли необходимые пути переменных
    - name: Validate required paths
      block:
        - name: Check path {{OUTPUT_DIR}}
          stat:
            path: "{{OUTPUT_DIR}}"
          register: OUTPUT_DIR_status

        - name: Check path {{SITE_DIR}}
          stat:
            path: "{{SITE_DIR}}"
          register: SITE_DIR_status

        - name: Check path {{TEMPLATE}}
          stat:
            path: "{{TEMPLATE}}"
          register: TEMPLATE_status

        - name: Check path {{CONFIG}}
          stat:
            path: "{{CONFIG}}"
          register: CONFIG_status

      rescue:
        - name: Fail if any path is missing
          fail:
            msg: >-
              Required path does not exist: 
              {% if not OUTPUT_DIR_status.stat.exists %}{{OUTPUT_DIR}}
              {% elif not SITE_DIR_status.stat.exists %}{{SITE_DIR}}
              {% elif not TEMPLATE_status.stat.exists %}{{TEMPLATE}}
              {% else %}{{CONFIG}}{% endif %}

# Проверка на пустые значения и отсуствующие переменные
    - name: Check required keys
      assert:
        that:
          - item.name is defined and item.name is not none and item.name | trim | length > 0
          - item.listen is defined and item.listen is not none and item.listen | trim | length > 0
          - item.server_name is defined and item.server_name is not none and item.server_name | trim | length > 0
          - item.root is defined and item.root is not none and item.root | trim | length > 0
        fail_msg: "Missing required key in item: {{ item }}"
      loop: "{{ sites }}"

# Создаем конфиг файл, вызывает reload nginx если внесены изменения (changed)
    - name: Create nginx-conf
      template:
        dest: "{{ OUTPUT_DIR }}/{{ item.name }}.conf"
        src: "{{ TEMPLATE }}"
        mode: 0774
      loop: "{{ sites }}"
      vars:
        listen: "{{ item.listen }}"
        server_name: "{{ item.server_name }}"
        root: "{{ item.root }}"
      register: nginx_config_changed
      notify:
        - Test nginx config
        - Show nginx config errors
        - Reload nginx

# Создаем директорию в /storage/www
    - name: Create folder in {{SITE_DIR}}
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.name }}"
      file:
        path: "{{ item.root }}"
        state: directory
        mode: "0775"

# Делаем запись в hosts
    - name: Adding a line to /etc/hosts
      loop: "{{ sites }}"
      vars:
        listen: "{{ item.listen }}"
        server_name: "{{ item.server_name }}"
      lineinfile:
        path: /etc/hosts
        line: "{{ item.listen.split(':')[0] }}   {{ item.server_name }}"
        state: present
        insertafter: EOF
#        regexp: ".*{{ item.server_name }}$"

# Nginx -t и reload сервиса
  handlers:
    - name: Test nginx config
      command: nginx -t
      changed_when: false
      register: nginx_test
      ignore_errors: yes

    - name: Show nginx config errors
      debug:
        var: nginx_test.stderr
      when: nginx_test.rc != 0

    - name: Reload nginx
      systemd:
        name: nginx
        state: reloaded
      when: nginx_test.rc == 0
